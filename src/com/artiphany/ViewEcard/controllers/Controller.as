//AS3///////////////////////////////////////////////////////////////////////////// // Copyright 2011 Simple Custom Solutions Corp.// ////////////////////////////////////////////////////////////////////////////////package com.artiphany.ViewEcard.controllers{import flash.display.LoaderInfo;import com.adobe.serialization.json.JSON;import flash.events.IOErrorEvent;import flash.events.Event;import flash.net.URLRequest;import flash.net.URLRequestMethod;import flash.net.URLVariables;import flash.net.URLLoader;import TypeError;import flash.display.Sprite;import com.artiphany.ViewEcard.events.DataLoadedEvent;/** * Class. *  * @langversion ActionScript 3.0 * @playerversion Flash 9.0 *  * @author ignacio david palladino * @since  08.11.2011 */public class Controller extends Sprite{		//--------------------------------------	// CLASS CONSTANTS	//--------------------------------------		//private const CURRENT_URL:String = "http://localhost:3000/requestmessages"	private const CURRENT_URL:String ="http://artiphany.herokuapp.com/requestmessages";		//--------------------------------------	//  CONSTRUCTOR	//--------------------------------------		/**	 * @constructor	 */	public function Controller()	{		super();	}		//--------------------------------------	//  PRIVATE VARIABLES	//--------------------------------------		//--------------------------------------	//  GETTER/SETTERS	//--------------------------------------		//--------------------------------------	//  PUBLIC METHODS	//--------------------------------------		public function requestData(code:String):void {	    //code = "dc423010ce45c0c142b12d305a8758ebe4a5a5c7202b5566252a4f0fd4ec675b";	    var url:String = CURRENT_URL;        var jsonURLReq:URLRequest = new URLRequest(url);        jsonURLReq.method = URLRequestMethod.POST;                var urlVariables:URLVariables = new URLVariables;        urlVariables.code = code;        jsonURLReq.data = urlVariables                var jsonSendLoad:URLLoader = new URLLoader();        jsonSendLoad.addEventListener(Event.COMPLETE, onComplete, false, 0, true);        jsonSendLoad.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);        jsonSendLoad.load(jsonURLReq);	}    		//--------------------------------------	//  EVENT HANDLERS	//--------------------------------------		private function onComplete(evt:Event):void {        try {                        var rawData:String = String(evt.target.data);            var jsonData:Object = JSON.decode(rawData);            createDataHolder(jsonData);            removeEventListener(Event.COMPLETE, onComplete);            removeEventListener(IOErrorEvent.IO_ERROR, onIOError);                    } catch (err:TypeError) {            trace("An error occured when communicating with server:\n" + err.message);        }    }        private function onIOError(evt:IOErrorEvent):void {        trace("An error occurred when attempting to load the XML.\n" + evt.text);    }		//--------------------------------------	//  PRIVATE & PROTECTED INSTANCE METHODS	//--------------------------------------		private function createDataHolder(data:Object):void {	    dispatchEvent(new DataLoadedEvent(data));	}}}